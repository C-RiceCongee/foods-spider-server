// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"foods-spider-server/internal/model/model/models"
)

func newYkFoodnutritionCopy1(db *gorm.DB, opts ...gen.DOOption) ykFoodnutritionCopy1 {
	_ykFoodnutritionCopy1 := ykFoodnutritionCopy1{}

	_ykFoodnutritionCopy1.ykFoodnutritionCopy1Do.UseDB(db, opts...)
	_ykFoodnutritionCopy1.ykFoodnutritionCopy1Do.UseModel(&models.YkFoodnutritionCopy1{})

	tableName := _ykFoodnutritionCopy1.ykFoodnutritionCopy1Do.TableName()
	_ykFoodnutritionCopy1.ALL = field.NewAsterisk(tableName)
	_ykFoodnutritionCopy1.ID = field.NewInt32(tableName, "id")
	_ykFoodnutritionCopy1.Docv = field.NewString(tableName, "docv")
	_ykFoodnutritionCopy1.Name = field.NewString(tableName, "name")
	_ykFoodnutritionCopy1.Xuhao = field.NewString(tableName, "xuhao")
	_ykFoodnutritionCopy1.Shibu = field.NewInt32(tableName, "shibu")
	_ykFoodnutritionCopy1.Clcnengliang = field.NewInt32(tableName, "clcnengliang")
	_ykFoodnutritionCopy1.Nengliang = field.NewInt32(tableName, "nengliang")
	_ykFoodnutritionCopy1.Shuifen = field.NewFloat64(tableName, "shuifen")
	_ykFoodnutritionCopy1.Danbai = field.NewFloat64(tableName, "danbai")
	_ykFoodnutritionCopy1.Zhifang = field.NewFloat64(tableName, "zhifang")
	_ykFoodnutritionCopy1.Tanshui = field.NewFloat64(tableName, "tanshui")
	_ykFoodnutritionCopy1.Xianwei = field.NewFloat64(tableName, "xianwei")
	_ykFoodnutritionCopy1.Huifen = field.NewFloat64(tableName, "huifen")
	_ykFoodnutritionCopy1.VA = field.NewFloat64(tableName, "VA")
	_ykFoodnutritionCopy1.B1 = field.NewFloat64(tableName, "B1")
	_ykFoodnutritionCopy1.B2 = field.NewFloat64(tableName, "B2")
	_ykFoodnutritionCopy1.B3 = field.NewFloat64(tableName, "B3")
	_ykFoodnutritionCopy1.VC = field.NewFloat64(tableName, "VC")
	_ykFoodnutritionCopy1.VE = field.NewFloat64(tableName, "VE")
	_ykFoodnutritionCopy1.Jia = field.NewFloat64(tableName, "jia")
	_ykFoodnutritionCopy1.Na = field.NewFloat64(tableName, "na")
	_ykFoodnutritionCopy1.Gai = field.NewFloat64(tableName, "gai")
	_ykFoodnutritionCopy1.Mei = field.NewFloat64(tableName, "mei")
	_ykFoodnutritionCopy1.Tie = field.NewFloat64(tableName, "tie")
	_ykFoodnutritionCopy1.Meng = field.NewFloat64(tableName, "meng")
	_ykFoodnutritionCopy1.Xin = field.NewFloat64(tableName, "xin")
	_ykFoodnutritionCopy1.Tong = field.NewFloat64(tableName, "tong")
	_ykFoodnutritionCopy1.Lin = field.NewFloat64(tableName, "lin")
	_ykFoodnutritionCopy1.Xi = field.NewFloat64(tableName, "xi")
	_ykFoodnutritionCopy1.Leibie = field.NewInt32(tableName, "leibie")
	_ykFoodnutritionCopy1.Lei = field.NewInt32(tableName, "lei")
	_ykFoodnutritionCopy1.Danguchun = field.NewFloat64(tableName, "danguchun")

	_ykFoodnutritionCopy1.fillFieldMap()

	return _ykFoodnutritionCopy1
}

type ykFoodnutritionCopy1 struct {
	ykFoodnutritionCopy1Do

	ALL          field.Asterisk
	ID           field.Int32
	Docv         field.String
	Name         field.String
	Xuhao        field.String
	Shibu        field.Int32
	Clcnengliang field.Int32
	Nengliang    field.Int32
	Shuifen      field.Float64
	Danbai       field.Float64
	Zhifang      field.Float64
	Tanshui      field.Float64
	Xianwei      field.Float64
	Huifen       field.Float64
	VA           field.Float64
	B1           field.Float64
	B2           field.Float64
	B3           field.Float64
	VC           field.Float64
	VE           field.Float64
	Jia          field.Float64
	Na           field.Float64
	Gai          field.Float64
	Mei          field.Float64
	Tie          field.Float64
	Meng         field.Float64
	Xin          field.Float64
	Tong         field.Float64
	Lin          field.Float64
	Xi           field.Float64
	Leibie       field.Int32
	Lei          field.Int32
	Danguchun    field.Float64

	fieldMap map[string]field.Expr
}

func (y ykFoodnutritionCopy1) Table(newTableName string) *ykFoodnutritionCopy1 {
	y.ykFoodnutritionCopy1Do.UseTable(newTableName)
	return y.updateTableName(newTableName)
}

func (y ykFoodnutritionCopy1) As(alias string) *ykFoodnutritionCopy1 {
	y.ykFoodnutritionCopy1Do.DO = *(y.ykFoodnutritionCopy1Do.As(alias).(*gen.DO))
	return y.updateTableName(alias)
}

func (y *ykFoodnutritionCopy1) updateTableName(table string) *ykFoodnutritionCopy1 {
	y.ALL = field.NewAsterisk(table)
	y.ID = field.NewInt32(table, "id")
	y.Docv = field.NewString(table, "docv")
	y.Name = field.NewString(table, "name")
	y.Xuhao = field.NewString(table, "xuhao")
	y.Shibu = field.NewInt32(table, "shibu")
	y.Clcnengliang = field.NewInt32(table, "clcnengliang")
	y.Nengliang = field.NewInt32(table, "nengliang")
	y.Shuifen = field.NewFloat64(table, "shuifen")
	y.Danbai = field.NewFloat64(table, "danbai")
	y.Zhifang = field.NewFloat64(table, "zhifang")
	y.Tanshui = field.NewFloat64(table, "tanshui")
	y.Xianwei = field.NewFloat64(table, "xianwei")
	y.Huifen = field.NewFloat64(table, "huifen")
	y.VA = field.NewFloat64(table, "VA")
	y.B1 = field.NewFloat64(table, "B1")
	y.B2 = field.NewFloat64(table, "B2")
	y.B3 = field.NewFloat64(table, "B3")
	y.VC = field.NewFloat64(table, "VC")
	y.VE = field.NewFloat64(table, "VE")
	y.Jia = field.NewFloat64(table, "jia")
	y.Na = field.NewFloat64(table, "na")
	y.Gai = field.NewFloat64(table, "gai")
	y.Mei = field.NewFloat64(table, "mei")
	y.Tie = field.NewFloat64(table, "tie")
	y.Meng = field.NewFloat64(table, "meng")
	y.Xin = field.NewFloat64(table, "xin")
	y.Tong = field.NewFloat64(table, "tong")
	y.Lin = field.NewFloat64(table, "lin")
	y.Xi = field.NewFloat64(table, "xi")
	y.Leibie = field.NewInt32(table, "leibie")
	y.Lei = field.NewInt32(table, "lei")
	y.Danguchun = field.NewFloat64(table, "danguchun")

	y.fillFieldMap()

	return y
}

func (y *ykFoodnutritionCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := y.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (y *ykFoodnutritionCopy1) fillFieldMap() {
	y.fieldMap = make(map[string]field.Expr, 32)
	y.fieldMap["id"] = y.ID
	y.fieldMap["docv"] = y.Docv
	y.fieldMap["name"] = y.Name
	y.fieldMap["xuhao"] = y.Xuhao
	y.fieldMap["shibu"] = y.Shibu
	y.fieldMap["clcnengliang"] = y.Clcnengliang
	y.fieldMap["nengliang"] = y.Nengliang
	y.fieldMap["shuifen"] = y.Shuifen
	y.fieldMap["danbai"] = y.Danbai
	y.fieldMap["zhifang"] = y.Zhifang
	y.fieldMap["tanshui"] = y.Tanshui
	y.fieldMap["xianwei"] = y.Xianwei
	y.fieldMap["huifen"] = y.Huifen
	y.fieldMap["VA"] = y.VA
	y.fieldMap["B1"] = y.B1
	y.fieldMap["B2"] = y.B2
	y.fieldMap["B3"] = y.B3
	y.fieldMap["VC"] = y.VC
	y.fieldMap["VE"] = y.VE
	y.fieldMap["jia"] = y.Jia
	y.fieldMap["na"] = y.Na
	y.fieldMap["gai"] = y.Gai
	y.fieldMap["mei"] = y.Mei
	y.fieldMap["tie"] = y.Tie
	y.fieldMap["meng"] = y.Meng
	y.fieldMap["xin"] = y.Xin
	y.fieldMap["tong"] = y.Tong
	y.fieldMap["lin"] = y.Lin
	y.fieldMap["xi"] = y.Xi
	y.fieldMap["leibie"] = y.Leibie
	y.fieldMap["lei"] = y.Lei
	y.fieldMap["danguchun"] = y.Danguchun
}

func (y ykFoodnutritionCopy1) clone(db *gorm.DB) ykFoodnutritionCopy1 {
	y.ykFoodnutritionCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return y
}

func (y ykFoodnutritionCopy1) replaceDB(db *gorm.DB) ykFoodnutritionCopy1 {
	y.ykFoodnutritionCopy1Do.ReplaceDB(db)
	return y
}

type ykFoodnutritionCopy1Do struct{ gen.DO }

func (y ykFoodnutritionCopy1Do) Debug() *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Debug())
}

func (y ykFoodnutritionCopy1Do) WithContext(ctx context.Context) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.WithContext(ctx))
}

func (y ykFoodnutritionCopy1Do) ReadDB() *ykFoodnutritionCopy1Do {
	return y.Clauses(dbresolver.Read)
}

func (y ykFoodnutritionCopy1Do) WriteDB() *ykFoodnutritionCopy1Do {
	return y.Clauses(dbresolver.Write)
}

func (y ykFoodnutritionCopy1Do) Session(config *gorm.Session) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Session(config))
}

func (y ykFoodnutritionCopy1Do) Clauses(conds ...clause.Expression) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Clauses(conds...))
}

func (y ykFoodnutritionCopy1Do) Returning(value interface{}, columns ...string) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Returning(value, columns...))
}

func (y ykFoodnutritionCopy1Do) Not(conds ...gen.Condition) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Not(conds...))
}

func (y ykFoodnutritionCopy1Do) Or(conds ...gen.Condition) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Or(conds...))
}

func (y ykFoodnutritionCopy1Do) Select(conds ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Select(conds...))
}

func (y ykFoodnutritionCopy1Do) Where(conds ...gen.Condition) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Where(conds...))
}

func (y ykFoodnutritionCopy1Do) Order(conds ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Order(conds...))
}

func (y ykFoodnutritionCopy1Do) Distinct(cols ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Distinct(cols...))
}

func (y ykFoodnutritionCopy1Do) Omit(cols ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Omit(cols...))
}

func (y ykFoodnutritionCopy1Do) Join(table schema.Tabler, on ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Join(table, on...))
}

func (y ykFoodnutritionCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.LeftJoin(table, on...))
}

func (y ykFoodnutritionCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.RightJoin(table, on...))
}

func (y ykFoodnutritionCopy1Do) Group(cols ...field.Expr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Group(cols...))
}

func (y ykFoodnutritionCopy1Do) Having(conds ...gen.Condition) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Having(conds...))
}

func (y ykFoodnutritionCopy1Do) Limit(limit int) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Limit(limit))
}

func (y ykFoodnutritionCopy1Do) Offset(offset int) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Offset(offset))
}

func (y ykFoodnutritionCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Scopes(funcs...))
}

func (y ykFoodnutritionCopy1Do) Unscoped() *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Unscoped())
}

func (y ykFoodnutritionCopy1Do) Create(values ...*models.YkFoodnutritionCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Create(values)
}

func (y ykFoodnutritionCopy1Do) CreateInBatches(values []*models.YkFoodnutritionCopy1, batchSize int) error {
	return y.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (y ykFoodnutritionCopy1Do) Save(values ...*models.YkFoodnutritionCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return y.DO.Save(values)
}

func (y ykFoodnutritionCopy1Do) First() (*models.YkFoodnutritionCopy1, error) {
	if result, err := y.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.YkFoodnutritionCopy1), nil
	}
}

func (y ykFoodnutritionCopy1Do) Take() (*models.YkFoodnutritionCopy1, error) {
	if result, err := y.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.YkFoodnutritionCopy1), nil
	}
}

func (y ykFoodnutritionCopy1Do) Last() (*models.YkFoodnutritionCopy1, error) {
	if result, err := y.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.YkFoodnutritionCopy1), nil
	}
}

func (y ykFoodnutritionCopy1Do) Find() ([]*models.YkFoodnutritionCopy1, error) {
	result, err := y.DO.Find()
	return result.([]*models.YkFoodnutritionCopy1), err
}

func (y ykFoodnutritionCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.YkFoodnutritionCopy1, err error) {
	buf := make([]*models.YkFoodnutritionCopy1, 0, batchSize)
	err = y.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (y ykFoodnutritionCopy1Do) FindInBatches(result *[]*models.YkFoodnutritionCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return y.DO.FindInBatches(result, batchSize, fc)
}

func (y ykFoodnutritionCopy1Do) Attrs(attrs ...field.AssignExpr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Attrs(attrs...))
}

func (y ykFoodnutritionCopy1Do) Assign(attrs ...field.AssignExpr) *ykFoodnutritionCopy1Do {
	return y.withDO(y.DO.Assign(attrs...))
}

func (y ykFoodnutritionCopy1Do) Joins(fields ...field.RelationField) *ykFoodnutritionCopy1Do {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Joins(_f))
	}
	return &y
}

func (y ykFoodnutritionCopy1Do) Preload(fields ...field.RelationField) *ykFoodnutritionCopy1Do {
	for _, _f := range fields {
		y = *y.withDO(y.DO.Preload(_f))
	}
	return &y
}

func (y ykFoodnutritionCopy1Do) FirstOrInit() (*models.YkFoodnutritionCopy1, error) {
	if result, err := y.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.YkFoodnutritionCopy1), nil
	}
}

func (y ykFoodnutritionCopy1Do) FirstOrCreate() (*models.YkFoodnutritionCopy1, error) {
	if result, err := y.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.YkFoodnutritionCopy1), nil
	}
}

func (y ykFoodnutritionCopy1Do) FindByPage(offset int, limit int) (result []*models.YkFoodnutritionCopy1, count int64, err error) {
	result, err = y.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = y.Offset(-1).Limit(-1).Count()
	return
}

func (y ykFoodnutritionCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = y.Count()
	if err != nil {
		return
	}

	err = y.Offset(offset).Limit(limit).Scan(result)
	return
}

func (y ykFoodnutritionCopy1Do) Scan(result interface{}) (err error) {
	return y.DO.Scan(result)
}

func (y ykFoodnutritionCopy1Do) Delete(models ...*models.YkFoodnutritionCopy1) (result gen.ResultInfo, err error) {
	return y.DO.Delete(models)
}

func (y *ykFoodnutritionCopy1Do) withDO(do gen.Dao) *ykFoodnutritionCopy1Do {
	y.DO = *do.(*gen.DO)
	return y
}
